#from auctionSimulator.hw4.agents.straightMU import *
#from auctionSimulator.hw4.agents.targetMU import *
#from auctionSimulator.hw4.agents.targetMUS import *
#from auctionSimulator.hw4.agents.averageMU import *
#from auctionSimulator.hw4.agents.riskAware import *
from auctionSimulator.hw4.agents.targetMU import *
from auctionSimulator.hw4.agents.straightMU import *
from auctionSimulator.hw4.agents.straightMU8 import *
from auctionSimulator.hw4.agents.riskAware import *


import unittest
import numpy
import tempfile

class testDistAgents(unittest.TestCase):
    """
    Unit tests for agents who bid with distributions over price predictions.
    """

    def setUp(self):
        """
        Initialize some random distributions that will act as test data for 
        Self Confirming Price Predictions.
        """
        #make some fake data
        self.m = 5
        self.randomPriceVector = numpy.random.random_integers(1,10,self.m)
        
        self.mu = [5,3,2,1,1]
#        self.sigma = [10]*self.m
        self.sigma = numpy.random.random_integers(1,15,self.m)
        self.randomPriceDist = []
        self.randomPriceCount = []
        for good in xrange(self.m):
            randomPrices = numpy.random.normal(loc=self.mu[good],scale=self.sigma[good],size=10000)
            self.randomPriceDist.append(numpy.histogram(randomPrices,bins=range(0,51),density=True))
        #test a single distribution
        
    def test_straightMU8(self):
        randomMargDist = margDistSCPP(self.randomPriceDist)
        
        myStraightMU8 = straightMU8(margDistPricePrediction = randomMargDist,name="myStraightMU8")
        
        myStraightMU8.printSummary()
        
    def test_straightMU(self):
        m = 5
        
        # test some of the pickle constructors for code coverage
        # similar to the point (straightMV) test case
        randomMargDist = margDistSCPP(self.randomPriceDist)
        
        tempFileObject = tempfile.NamedTemporaryFile('w+b', suffix='.pkl')
        
        randomMargDist.savePickle(tempFileObject.file)
        
        # set index to beggining of file to simulate close and re-open
        tempFileObject.file.seek(0)
        
        randomMargDist2 = margDistSCPP()
        
        randomMargDist2.loadPickle(tempFileObject.file)
        
        # test that the pickle methods work
        for idx in xrange(len(randomMargDist.data)):
            
            numpy.testing.assert_equal(randomMargDist.data[idx][0],
                                       randomMargDist2.data[idx][0], 
                                       err_msg = 'Pickling save/load failed')
        
            numpy.testing.assert_equal(randomMargDist.data[idx][1],
                                       randomMargDist2.data[idx][1], 
                                       err_msg = 'Pickling save/load failed')
        
        myStraightMU = straightMU(margDistPricePrediction = randomMargDist,name="myStraightMU")
        
        #make sure the data flows down super calls correctly
        self.assertEqual("myStraightMU",myStraightMU.name)
            
        print ''
        myStraightMU.printSummary()
        print''
        
        myStraightMU2 = straightMU(v=myStraightMU.v,l=myStraightMU.l)
        myStraightMU2.setPricePrediction(randomMargDist2)
        
        bid = myStraightMU.bid()
        
        bid2 = myStraightMU2.bid()
        
        numpy.testing.assert_equal(bid,bid2)
        
    def test_riskAware(self):
        m = 5
        
        #will have to modify this if you run on a different computer
        distPkl='C:\\bmProjects\\courses\\fall2011\\'+\
            'csci2951\\auctionSimulator\\hw4\\pricePrediction\\'+\
            'margDistPredictions\\'+\
            'distPricePrediction_straightMU_1000000_2011_12_1_1322764627.pkl'
            
        margDistPrediction = margDistSCPP()
        margDistPrediction.loadPickle(distPkl)
        
        trueDist = numpy.array([ [5.918999205849322448e-06, 2.016060467447115118e-02, 1.902977721613570081e-02, 1.822895806370443059e-02, 1.752997363068326681e-02, 1.663701128772120119e-02, 1.609958858070674806e-02, 1.611799111624203154e-02, 1.567048622136203023e-02, 1.603431743319110384e-02, 1.659069863685172855e-02, 1.758702254065727666e-02, 1.895755530158197213e-02, 2.066439628309065316e-02, 2.264180210206419644e-02, 2.512286666020966189e-02, 2.785176174749609546e-02, 2.980712092039915564e-02, 3.183207624116343032e-02, 3.391583951140986902e-02, 3.612455477855984476e-02, 3.788987945768249738e-02, 3.980665555313617210e-02, 4.091805459979837994e-02, 4.200851398472847664e-02, 3.178258601206284534e-02, 2.255041872645820872e-02, 1.492479393302264742e-02, 8.259428901207789900e-03, 1.084575632537822416e-02, 6.204950187009144157e-03, 2.333835397873878625e-03, 4.915013888136879339e-03, 2.204372543057691279e-03, 5.918999205849322448e-06, 5.918999205849322448e-06, 1.735309110779753193e-03, 5.858879765760640658e-03, 9.757413344548234932e-03, 1.338158740078604358e-02, 1.647623491657162001e-02, 1.980513351909921407e-02, 2.229007782609445168e-02, 2.513327064396479044e-02, 2.742575743246447942e-02, 2.989763810183984974e-02, 3.171494488539308015e-02, 3.354877608015453122e-02, 3.538304810423228974e-02, 2.632550941343916179e-02],
                                 [5.319207019820012579e-06, 1.441828861817719479e-02, 1.263288428812919632e-02, 1.049875195323913234e-02, 8.339113753660370651e-03, 5.836016004586825137e-03, 3.699052721707829765e-03, 1.157093102847616805e-03, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 5.319207019820012579e-06, 2.894363799030186951e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02, 3.975539550582491560e-02],
                                 [5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 5.284315685784863691e-06, 1.812928569509302456e-03, 4.399615880370725922e-03, 6.974974564838769611e-03, 1.031868242946444754e-02, 1.332339698640450619e-02, 1.736679184752116384e-02, 2.130890694737865021e-02, 2.505469230270162412e-02, 2.912713891319725079e-02, 3.292363943670322673e-02, 3.464003181568708206e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02, 3.489846309805438862e-02],
                                 [5.317038105643882821e-06, 5.317038105643882821e-06, 5.317038105643882821e-06, 5.317038105643882821e-06, 5.317038105643882821e-06, 5.317038105643882821e-06, 5.950220925346404958e-04, 2.345563642515560449e-03, 4.160817525715169128e-03, 6.396455175054864377e-03, 8.305059454390808019e-03, 1.055835827519950761e-02, 1.233484003332421981e-02, 1.436943674320016046e-02, 1.621690009441833363e-02, 1.777335327639488483e-02, 1.964998969297893083e-02, 2.111235385734139616e-02, 2.241134749752948102e-02, 2.371477718027702533e-02, 2.477927753257520155e-02, 2.569537655762499720e-02, 2.641721079903013719e-02, 2.697572322579635737e-02, 2.732211918791281960e-02, 2.749967374911063689e-02, 2.755391630260022040e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02, 2.755567503808006510e-02],
                                 [5.195167456150584182e-06, 6.352485653573537033e-03, 8.397030537398684352e-03, 1.018858843613535022e-02, 1.200305246649960994e-02, 1.355186618338567912e-02, 1.483531154865148916e-02, 1.610181766135381984e-02, 1.711265404754316877e-02, 1.801385570160267055e-02, 1.892242934529654932e-02, 1.960236276941944994e-02, 2.010974428372331105e-02, 2.067124734842937933e-02, 2.107417062013237571e-02, 2.146629732611977232e-02, 2.172146559356518888e-02, 2.191473080957076491e-02, 2.209477954103629405e-02, 2.223077406478741677e-02, 2.232269917756428759e-02, 2.239172163757209219e-02, 2.243655337442093320e-02, 2.245028330021530544e-02, 2.245865990218967601e-02, 2.246231785583290008e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02, 2.246282940193848263e-02] ])
        
        for idx in xrange(m):
            numpy.testing.assert_allclose(margDistPrediction.data[idx][0], trueDist[idx])
        
        myRiskAware = riskAware(m = m,
                                margDistPricePrediction = margDistPrediction,
                                A=10)
        
        myRiskAware.printSummary()
        
        
        randomMargDist = margDistSCPP(self.randomPriceDist)
        
        myRiskAware.setPricePrediction(randomMargDist)
        
        print ''
        
        myRiskAware.printSummary()
        
        
if __name__ == "__main__":
    unittest.main()